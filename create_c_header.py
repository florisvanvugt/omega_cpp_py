import struct
import re
import sharedmem

# This script will read the shared memory specification
# and then output a header/source file to be compiled together
# with the robot code so that the shared memory is accessible
# and the different fields are in place.

# Read the shared memory specification
sharedmem.init_specifications('.')



def convert_py_cpp(tp):
    """ Convert a python-style variable specification
    into the corresponding c-style variable specification. """
    if (tp == 'd'): return 'double'
    elif (tp == 'i'):
        print("WARNING: If you use an int, Python may not compute the address correctly (see README)")
        return 'int'
    elif (tp == 'q'): return 'long int'


    
fw = open('struct_shm.h','w')
fw.write("// DO NOT EDIT THIS FILE, AUTO-GENERATED BY create_c_header.py\n")
fw.write("using namespace std;\n\n")
fw.write("struct shm_t {\n")


sizeshm = 0
for nm in sharedmem.variable_order:
    tp,_,sz  = sharedmem.specifications[nm]

    # Determine whether this type is an array; if so, make the correct C type specification
    mat = re.match(r'(\d+)*([a-z])',tp)
    size_tab, type_tab = mat.groups()
    typevar = convert_py_cpp(type_tab)
    if mat: #If variable found
        if size_tab: #If variable's size is more than 1
            nm += '[%s]'%size_tab #+ size_tab + ']'
    else:
        print("Variable not found.")

    fw.write("\t%s %s;\t // memory offset %i \n"%(typevar,nm,sizeshm))

    # Keep track of the size
    sizeshm += sz


fw.write("};\n")

    
fw.write("#define SHM_FILESIZE %s\n\n"%sizeshm)

fw.close()
